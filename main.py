
"""
This Python script is designed to perform the following tasks:
1. Create a map of windmills based on input data or generate a default map.
2. Calculate the power generation of each windmill.
3. Calculate the monetary value generated from the power produced by the windmills.
4. Calculate the wear and tear of windmill parts based on usage and environmental factors.
5. Solve the Travelling Salesperson Problem (TSP) to determine the optimal route for servicing the windmills.
Classes:
    - Node: Represents a windmill. Includes a method to calculate the difference between two nodes.
    - Map: Represents a collection of windmilss and provides methods to manage and interact with them.
Functions:
    - main(file_path=None): The entry point of the script. Reads windmill data from a CSV file if a file path is provided, or generates a default map otherwise.
"""

import csv
import sys
import os
import datetime
import math
import matplotlib.pyplot as plt

class Node:
    def __init__(self, data=None, component=None):
        """
        Represents a windmill.
        Can also store additional data as a dictionary and an optional Component object.

        :param data: A dictionary containing additional key-value pairs (optional).
        :param component: An instance of the Component class (optional).
        """
        self.data = data if data else {}
        self.component = component

    def __repr__(self):
        """
        String representation of the Node object.
        """
        return f"Node(data={self.data}, component={self.component})"
    
    def add_component(self, component):
        """
        Adds a component to the node.
        :param component: An instance of the Component class.
        """
        if self.component is not None:
            self.component.append(component)
        else:
            self.component = component
    
    def show_component_lifetime(self):
        """
        Displays the lifetime of the component.
        """
        if self.component is not None:
            for component in self.component:
                print(f"Component name: {component.name}")
                print(f"Component installation date: {component.installation_date}")
                print(f"Component current lifetime: {component.current_lifetime}")
        else:
            print("No component found.")

    def calculate_power(self):
        """
        Calculates the power generation of the windmill based on its data.
        :return: The power generation value.
        """
        try:
            if not self.data.get('status'): # The windmill is not operational
                return 0
            elif self.data.get('power').isdigit():
                return float(self.data['power']) * 1000  # TODO: Add unit conversion here.
            else:
                #TODO: add function aanlysis here.
                return None
        except AttributeError:
            print("No data available to process.")
            return 0
  
    def calculate_energy(self, start_time, end_time):

        """
        Calculates the energy generated by the windmill over a specified time period.
        :param start_time: The start time of the period (datetime object).
        :param end_time: The end time of the period (datetime object).
        :return: The energy generated during the period.
        """
        try:
            if not self.data.get('status'): # The windmill is not operational
                return 0
            elif self.data.get('power').isdigit():
                power = float(self.data['power']) * 1000  # TODO: Add unit conversion here.
                duration = (end_time - start_time).total_seconds() / 3600  # Convert to hours
                return power * duration
            else:
                #TODO: add function aanlysis here.
                return None
        except AttributeError:
            print("No data available to process.")
            return 0

class Component:
    def __init__(self, node, name, lifetime, serial_number, installation_date):
        # component = Component(node=None, name="Rotor", lifetime=10, serial_number="RT12345", installation_date="2023-01-01")  
        self.node = node
        self.name = name
        self.lifetime = lifetime #TODO: Need to make value multi format (int, float, str)
        self.current_lifetime = self.calculate_lifetime(self.lifetime)
        self.serial_number = serial_number
        self.installation_date = installation_date

    def update_date(self):
        # Update the time sensative component to the current time
        return 
    
    def calcuate_lifetime(self, lifetime):
        # Calculate the lifetime of the component based on the current time and the installation time
        try:
            return lifetime - (datetime.date.now() - self.installation_date)
        except AttributeError:
        # Handle the case where data is None (no attribute 'process')
            print("No data available to process.")
        except Exception as e:
        # Handle other potential errors
            print(f"An error occurred: {e}")


class Map:
    def __init__(self, nodes=None):
        self.nodes = nodes if nodes else []

    def add_node(self, node):
        self.nodes.append(node)

    def get_nodes(self):
        return self.nodes
    
    def calculate_total_power(self):
        """
        Calculates the total power generation of all windmills in the map.
        :return: The total power generation value.
        """
        total_power = 0
        for node in self.nodes:
            power = node.calculate_power()
            if power is not None:
                total_power += power
        return total_power

    def calculate_total_energy(self, start_time, end_time):
        """
        Calculates the total energy generated by all windmills in the map over a specified time period.
        :param start_time: The start time of the period (datetime object).
        :param end_time: The end time of the period (datetime object).
        :return: The total energy generated during the period.
        """
        total_energy = 0
        for node in self.nodes:
            energy = node.calculate_energy(start_time, end_time)
            if energy is not None:
                total_energy += energy
        return total_energy
    
    def draw_map(self):
        """
        Draws the map of windmills using matplotlib.
        """
        
        x = [node.data['latitude'] for node in self.nodes]
        y = [node.data['longtitude'] for node in self.nodes]
        plt.scatter(x, y)
        plt.title("Windmill Map")
        plt.xlabel("Latitude")
        plt.ylabel("Longitude")
        plt.show()

        self.add_feature()

    def add_feature(self, buttons=None):
        """
        Adds features to the map.
        :param buttons: A list of buttons to add to the map (optional).
        """
        if buttons is None:
            buttons = ["Add Node", "Remove Node", "Calculate Power"]
        
        for button in buttons:
            print(f"Button {button} added to the map.")
    
def generateDemoMap():
    print(f"Demo selected, generating default map...")
    nodeData1 = {"latitude": 100, 
                 "longtitude": 120,
                 "power": 1.5, 
                 "manufacturer": "WindTech", 
                 "location": "North Field"}
    nodeData2 = {"latitude": 50, 
                 "longtitude": 70,
                 "power": 1.5, 
                 "manufacturer": "WindTech", 
                 "location": "North Field"}
    node1 = Node(data=nodeData1)
    node2 = Node(data=nodeData2)
    windmill_map = Map([node1, node2])
    print(f"Generated default map with {len(windmill_map.get_nodes())} nodes.")
    print(f"Map: {windmill_map.get_nodes()}")
    windmill_map.draw_map()
    return windmill_map

def main(file_path=None):

    if file_path is None:
        return print(f"No file path inputed. If you want to generate a demo map, please input 'Demo' as the file path.")
    elif file_path == 'Demo':
        # Generate demo map
        generateDemoMap()
        return 
    else:
        try:
            with open(file_path, mode='r') as file:
                reader = csv.reader(file)
                nodes = []
                for row in reader:
                    x, y = map(float, row)
                    nodes.append(Node(x, y))
                windmill_map = Map(nodes)
                print(f"Loaded {len(windmill_map.get_nodes())} nodes from file.")
        except FileNotFoundError:
            print(f"File {file_path} not found.")

if __name__ == "__main__":
    main(sys.argv[1] if len(sys.argv) > 1 else None)